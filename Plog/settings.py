"""
Django settings for Plog project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!*-0olh)(gt+lzuqx34n@@cjkowhh(9^or4g5%_jlu3xf8$g6x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tinymce',  # 富文本编辑器
    'haystack',  # 全文检索框架
    'user',
    'content',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Plog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries':{
                'filters': 'content.templatetags.filters',
            }
        },
    },
]

WSGI_APPLICATION = 'Plog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'plog',
        'USER':'plog',
        'PASSWORD':'plog',
        'HOST':'ip',  # 主机ip
        'PORT':'3306'
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/mblog/static'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]


# 富文本编辑器
TINYMCE_DEFAULT_CONFIG = {
    'theme':'advanced',
    'width':800,
    'height':600,
}

# django 认证系统使用的模型类
AUTH_USER_MODEL = 'user.User'


# 发送邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 发邮件的smpt服务器地址
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = '发件方的邮箱'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'wtqhoxdrwlhwbfhi'  # qq邮箱的授权码
# 收件人看到的发件人
EMAIL_FROM = '项目名称发件人的邮箱'



# 配置django的缓存
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://ip:6379/6",  # redis 的数据库连接,6号数据库
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# 配置session存储，把session缓存于redis中
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


# 使用login_required()方法来判断是否登录，
# 若未登录过，产生的默认的url的地址进行跳转：/account/login?next = (跳转之前要访问的地址)
# 配置登录url地址
LOGIN_URL = '/user/login'  # 默认是/account/login?next=(跳转之前要访问的地址)


# MEDIA_ROOT = os.path.join(BASE_DIR, 'static/media')
# MEDIA_ROOT=os.path.join(BASE_DIR,"static/media")

'''fastdfs文件存储系统的配置'''
# 配置指定文件系统的存储类，默认：django.core.files.storage.FileSystemStorage
# DEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'
#
# # 设置fdfs的client.conf配置文件的路径
# FDFS_CLIENT_CONF = './utils/fdfs/client.conf'
# # 设置fdfs存储服务器上的nginx的IP和port
# FDFS_SERVER_URL = 'http://192.168.145.129:8888/'


# 这是搜索引擎框架haystack的配置
HAYSTACK_CONNECTIONS = {
    'default': {
        #使用whoosh引擎, 'haystack.backends.whoosh_backend.WhooshEngine是
        # 虚拟环境中haystack目录下的backends
        # 目录下的whoosh_backend文件中的WhooshEngine这个类
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        #索引文件路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    },
    # 'whoosh': {
    #     # For Whoosh:
    #     'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
    #     'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),
    #     'INCLUDE_SPELLING': True,
    # },
    # 'simple': {
    #     # For Simple:
    #     'ENGINE': 'haystack.backends.simple_backend.SimpleEngine',
    # }
}

#当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
